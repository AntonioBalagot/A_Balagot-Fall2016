// FracCalc-Fractional Calculator
// Antonio Balagot
// APCS1
// 12/10/16
// Goal is to create a fractional calculator to compute arithmetic operations between integers
// and/or fractions and output the result as a reduced mixed fraction.

package fracCalc;
import java.util.*;

public class FracCalc {
	//main reads input from the user and calls produceAnswer with an equation
    public static void main(String[] args) {
    	Scanner userInput = new Scanner(System.in);
    	System.out.println("Enter an expression, or type 'quit' to exit the program");
    	String equation=userInput.nextLine();
    	//To ask for input until quit is entered
    	while (equation.indexOf("quit")<0){
    	   equation=userInput.nextLine();
    	   System.out.println(produceAnswer(equation));
    	   System.out.println("Enter a new expression, or type 'quit' to exit the program");
    	}    
    	userInput.close();
    }

    // ** IMPORTANT ** DO NOT DELETE THIS FUNCTION.  This function will be used to test your code
    // This function takes a String 'input' and produces the result
    //
    // input is a fraction string that needs to be evaluated.  For your program, this will be the user input.
    //      e.g. input ==> "1/2 + 3/4"
    //        
    // The function should return the result of the fraction after it has been calculated
    //      e.g. return ==> "1_1/4"
    
    // Parts 1 & 2: produceAnswer takes a String and splits into two operands and the operator. 
    //Then it parses each operand into a whole number, numerator, and denominator.
    //Finally it returns a string that describes each component of the second operator.
    //Part 3:
    public static String produceAnswer(String expression) {
    	//splitUpParts contains split up parts such as numerators and denominators
    	//Split at spaces to get 2 operands and an operator
    	String[] splitUpParts=expression.split(" ");
    	String firstOperand=splitUpParts[0];
    	String operator=splitUpParts[1];
    	String secondOperand=splitUpParts[2];
    	
    	parseOperand(firstOperand);
    	parseOperand(secondOperand);
    	String calculation = "";
    	
    	//Returns error message if there are multiple operators
    	if(operator.length() != 1){
    		throw new IllegalArgumentException("Please enter a new expression. Your input is invalid.");
    	}
    	// Determines which operator is in the expression and calls the right method to deal with it
    	if(operator.equals("+")){
    		calculation=simplify(addOrSubtractFrac(parseOperand(firstOperand), parseOperand(secondOperand), operator));
    	}else if(operator.equals("-")){
    		calculation=simplify(addOrSubtractFrac(parseOperand(firstOperand), parseOperand(secondOperand), operator));
    	}else if(operator.equals("*")){
    		calculation=simplify(multiplyFrac(parseOperand(firstOperand), parseOperand(secondOperand)));
    	}else if(operator.equals("/")){
    		calculation=simplify(divideFrac(parseOperand(firstOperand), parseOperand(secondOperand)));
    	}else{
    		calculation="Please enter a new expression. Your input is invalid.";
    	}
    	return(calculation);
    }
    
    public static int[] parseOperand(String operand){
    	int[] separatedOperand=new int[3];
    	
    	if (operand.indexOf("_")>=0){
         	String[] splitOperand=operand.split("_");
         	separatedOperand[0]=Integer.parseInt(splitOperand[0]);
         	String firstFrac=splitOperand[1];
         	String[] separateFraction=firstFrac.split("/");
         	separatedOperand[1]=Integer.parseInt(separateFraction[0]);
         	separatedOperand[2]=Integer.parseInt(separateFraction[1]);
         }else if(operand.indexOf("/")>=0){
         	String[] splitOperand=operand.split("/");
         	separatedOperand[1]=Integer.parseInt(splitOperand[0]);
         	separatedOperand[2]=Integer.parseInt(splitOperand[1]);
         }else{
        	 String[] splitOperand=operand.split("_");
        	 separatedOperand[0]=Integer.parseInt(splitOperand[0]);
        	 separatedOperand[2]=1;
         }
    	 return(toImproperFrac(separatedOperand));
    }
    	
         	
    public static int[] addOrSubtractFrac(int[] firstOperand , int[]secondOperand, String operator){
    	int[] a = new int[2];
    	a[0]=0;
    	a[1]=1;
    	if(operator.equals("-")){
    		secondOperand[0] *= -1;
    	}
    	if(firstOperand[1] == secondOperand[1]){
    		a[0]=firstOperand[0] + secondOperand[0];
    		a[1]=firstOperand[1];
    	}else{
    		a[0]=(firstOperand[0] * secondOperand[1]) + (secondOperand[0] * firstOperand[1]);
    		a[1]=firstOperand[1]*secondOperand[1];
    	}
    	return(a);
    }
    	
    public static String subtractFrac(int[] firstOperand , int[] secondOperand){
    	int subtractNumerator=0;
    	int subtractDenominator=0;
    	if(firstOperand[1] == secondOperand[1]){
    		subtractNumerator=firstOperand[0] - secondOperand[0];
    	}else{
    		subtractNumerator = (firstOperand[0] * secondOperand[1]) - (secondOperand[0] * firstOperand[1]);
    		subtractDenominator=firstOperand[1] * secondOperand[1];
    	}
    	return(subtractNumerator + "/" + subtractDenominator);
    }
    	
    public static int[] multiplyFrac(int[] firstOperand , int[] secondOperand){
    	int[] a=new int[2];
    	a[0]=0;
    	a[1]=1;
    	a[0]=firstOperand[0]*secondOperand[0];
    	a[1]=firstOperand[1]*secondOperand[1];
    	return(a);
    }
    	
    public static int[] divideFrac(int[] firstOperand , int[] secondOperand){
    	int[] a=new int[2];
    	a[0]=0;
    	a[1]=1;
    	a[0]=firstOperand[0]*secondOperand[1];
    	a[1]=firstOperand[1]*secondOperand[0];
    	if(a[0]>=0 && a[1]<0){
    		a[0] *=-1;
    		a[1] *=-1;
    	}
    	return(a);
    }
    
    public static String simplify(int[] a){
    	int wholeNum=0;
    	int numerator=0;
    	int denominator=1;
    	
    	if(absValue(a[0])>absValue(a[1])){
    		wholeNum=a[0]/a[1];
    		numerator=a[0]%a[1];
    		denominator=a[1];
    	}
    	if(absValue(a[0])<absValue(a[1])){
    		numerator=a[0];
    		denominator=a[1];
    	}
    	if(a[0]==a[1]){
    		wholeNum=1;
    	}
    	
    	int gcf=gcf(numerator, denominator);
    	numerator = numerator/gcf;
    	denominator=denominator/gcf;
    	if(numerator==0){
    		return(wholeNum + "");
    	}else if(wholeNum==0){
    		if(wholeNum==0 && denominator<0){
    			return(absValue(numerator) + "/" + absValue(denominator));
    		}else if(denominator<0){
    			return((numerator * -1) + "/" + absValue(denominator));
    		}else if(denominator !=1){
    			return(numerator + "/" + denominator);
    		}else if(denominator==0){
    			return("Cannot divide by zero.");
    		}else{
    			return(numerator + "");
    		}
    	}else{
    		return(wholeNum + "_" + absValue(numerator) + "/" + absValue(denominator));
    		}
    	}
    
    
    
    
    // HELPER METHODS
    public static int[] toImproperFrac(int[] separatedOperand) {
  		//Array to store the parts of an improper fraction
    	int[]separatedImproper=new int[2];
  		separatedImproper[1]=separatedOperand[2];
  		if(separatedOperand[0] > 0){
  			//For the whole number times the denominator, plus the numerator
  			separatedImproper[0]=separatedOperand[0]*separatedOperand[2]+separatedOperand[1]; 
  		}else if(separatedOperand[0] < 0){
  			separatedImproper[0]=separatedOperand[0]*separatedOperand[2]+separatedOperand[1]*-1;
  		}else{
  			separatedImproper[0]=separatedOperand[1];
  		}
  		return(separatedImproper);
  		}
  		      
      public static boolean isDivisibleBy(int number1, int number2) {
    	//Determines if one integer is divisible by another in order to simplify the fraction
  		if (number1 < number2) {
  			throw new IllegalArgumentException("number1 must be greater than number2");
  		}
  		if(number1 % number2 == 0){
  		return true;
  		}else{
  			return false;
  		}
  	  }
      
      public static int absValue(int number) {
  		if(number > 0){;
  		return number;
  		}else{
  			return (number * -1);
  		}
  	  }
      
      public static int gcf(int num1, int num2) {
  		if(num1 < 0 || num2 < 0) {
  			return gcf(absValue(num1), absValue(num2));
  		}if(num2 == 0) {
  			return num1;
  		} else {
  			return gcf(num2, num1 % num2);
  		}
  	}
}

  
